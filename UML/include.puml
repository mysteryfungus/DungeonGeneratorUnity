@startuml
class Export {
    + OnClick() : void
    NoToolkitCaptureAndSaveAsPDF() : IEnumerator
    + ToolkitCaptureAndSaveAsPDF() : IEnumerator
}
MonoBehaviour <|-- Export
Export --> "ui" UIDocument
Export --> "cam" Camera
class ButtonInvoke {
    + <<readonly>> customLabel : string
    + <<readonly>> methodName : string
    + <<readonly>> methodParameter : object
    + ButtonInvoke(methodName:string, methodParameter:object, displayIn:DisplayIn, customLabel:string)
}
enum DisplayIn {
    PlayMode,
    EditMode,
    PlayAndEditModes,
}
PropertyAttribute <|-- ButtonInvoke
ButtonInvoke --> "displayIn" DisplayIn
ButtonInvoke +-- DisplayIn
class MoveCamera {
    + panSpeed : float = 20f
    + zoomSpeed : float = 1f
    Update() : void
}
MonoBehaviour <|-- MoveCamera
class CameraBounds {
    Start() : void
    LateUpdate() : void
    UpdateCanvasBounds() : void
    ClampCameraPosition() : void
    + SetZoom(newSize:float) : void
}
MonoBehaviour <|-- CameraBounds
CameraBounds --> "mainCamera" Camera
CameraBounds --> "canvasRect" RectTransform
class Adjuster {
    CalculateCameraSize(dungeonGenerator:DungeonGenerator) : float
    + AdjustPosition(dungeonGenerator:DungeonGenerator) : void
}
MonoBehaviour <|-- Adjuster
class NameGenerator {
    nameRowsCount : int = 0
    nounRowsCount : int = 0
    adjRowsCount : int = 0
    result : string = ""
    temp_word : string = ""
    + NameGenerator()
    + GenerateName() : string
}
class "List`1"<T> {
}
ObjectGenerator <|-- NameGenerator
NameGenerator o-> "found_name" Name
NameGenerator o-> "found_noun" Noun
NameGenerator o-> "found_adjective" Adjective
NameGenerator --> "gender" Gender
NameGenerator o-> "names<Name>" "List`1"
NameGenerator o-> "nouns<Noun>" "List`1"
NameGenerator o-> "adjectives<Adjective>" "List`1"
class ThreatGenerator {
    + ThreatGenerator()
    + BuildEncounter(party_member_amount:int, party_level:int, room_amount:int, useHumansInBattle:bool, useHazards:bool) : List<Tuple<int, List<Monster>, List<Hazard>>>
    + BuildEncounter(party_member_amount:int, party_level:int, roomsCoordinates:List<object>, useHumansInBattle:bool, useHazards:bool) : List<Tuple<object, List<Monster>, List<Hazard>>>
    + RandomDifficulty(random:System.Random) : string
    + BuildRoom(difficulty:string, useHumansInBattle:bool, useHazards:bool) : void
}
class "Dictionary`2"<T1,T2> {
}
ObjectGenerator <|-- ThreatGenerator
ThreatGenerator o-> "xb_by_difficulty<string,int>" "Dictionary`2"
ThreatGenerator o-> "xp_by_party_size<string,int>" "Dictionary`2"
class HazardGenerator {
    + HazardGenerator()
    + BuildHazard(xpbudget:int, party_level:int) : List<Hazard>
    + BuildSimpleHazard(xpbudget:int, party_level:int) : int
}
class "Dictionary`2"<T1,T2> {
}
ObjectGenerator <|-- HazardGenerator
HazardGenerator o-> "simpleExpCostList<int,int>" "Dictionary`2"
HazardGenerator o-> "complexExpCostList<int,int>" "Dictionary`2"
HazardGenerator o-> "simple_hazards_by_lvl<int,List<Hazard>>" "Dictionary`2"
HazardGenerator o-> "complex_hazards_by_lvl<int,List<Hazard>>" "Dictionary`2"
HazardGenerator --> "hazard" Hazard
class DBManager {
    {static} dbName : string = "/DungeonGenerator.db"
    + {static} dbLink : string
    + useHumansInBattle : bool = true
    + useHazards : bool = true
    Awake() : void
    InitGenerators() : void
    {static} CheckDB() : bool
    + GenerateRoomsContent(partyMemberAmount:int, partyLevel:int, roomAmount:int, useHumansInBattle:bool, useHazards:bool) : List<Tuple<int, List<Monster>, List<Hazard>>>
    + GenerateRoomsContent(partyMemberAmount:int, partyLevel:int, roomCoordinates:List<object>, useHumansInBattle:bool, useHazards:bool) : List<Tuple<object, List<Monster>, List<Hazard>>>
    + SaveRoomContentsToFile(rooms:List<Tuple<object, List<Monster>, List<Hazard>>>) : void
    generateDungeonName() : String
}
MonoBehaviour <|-- DBManager
class MonsterGenerator {
    + MonsterGenerator()
    + useHumansInBattle : bool
    + BuildCombat(xpbudget:int, party_level:int, _useHumansInBattle:bool) : List<Monster>
}
class "Dictionary`2"<T1,T2> {
}
ObjectGenerator <|-- MonsterGenerator
MonsterGenerator --> "monster" Monster
MonsterGenerator o-> "expcostlist<int,int>" "Dictionary`2"
MonsterGenerator o-> "monsters_by_lvl<int,List<Monster>>" "Dictionary`2"
abstract class ObjectGenerator {
}
class DungeonGenerator {
    + roomCount : int = 10
    + minRoomSeparation : float = 3f
    Start() : void
    + RegenerateDungeon() : void
    ClearDungeon() : void
    GenerationRoutine() : void
    FillWalls() : void
    PlaceRooms() : void
    ConnectRooms() : void
    CreateRoom(room:Room) : void
    CreateCorridor(roomA:Room, roomB:Room) : void
    CreateCorridorSegment(start:Vector2, end:Vector2) : void
}
MonoBehaviour <|-- DungeonGenerator
DungeonGenerator o-> "minRoomSize" Vector2
DungeonGenerator o-> "maxRoomSize" Vector2
DungeonGenerator o-> "dungeonSize" Vector2
class TilemapEditor {
    + isEditingMode : bool = false
    Update() : void
    + ToggleEditingMode() : void
}
MonoBehaviour <|-- TilemapEditor
TilemapEditor --> "tilemap" Tilemap
TilemapEditor --> "floorTile" RuleTile
TilemapEditor --> "wallTile" RuleTile
class Room {
    + Room(position:Vector2, size:Vector2)
    + GetCenter() : Vector2
    + Intersects(other:Room) : bool
}
class Corridor {
    + Corridor(start:Vector2, end:Vector2)
}
Room --> "Position" Vector2
Room --> "Size" Vector2
Corridor --> "Start" Vector2
Corridor --> "End" Vector2
class Name {
    + Base : string <<get>> <<set>>
    + SingularNominative : string <<get>> <<set>>
    + SingularGenitive : string <<get>> <<set>>
    + PluralNominative : string <<get>> <<set>>
    + PluralGenitive : string <<get>> <<set>>
    + Name(Base:string, SingularNominative:string, SingularGenitive:string, PluralNominative:string, PluralGenitive:string, gender:Gender)
    + {static} ToName(values:object[]) : Name
    + SingNom() : string
    + SingGen() : string
    + PluralNom() : string
    + PluralGen() : string
}
DbClass <|-- Name
Name --> "Gender" Gender
class Monster {
    + id : int <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + MechDescription : string <<get>> <<set>>
    + Level : int <<get>> <<set>>
    + Monster()
    + Monster(id:int, Name:string, Description:string, MechDescription:string, Level:int)
    + {static} ToMonster(values:object[]) : Monster
    + <<override>> ToString() : string
    + ToTextFileString() : string
}
DbClass <|-- Monster
class Adjective {
    + Base : string <<get>> <<set>>
    + SingularNominativeFeminine : string <<get>> <<set>>
    + SingularGenitiveFeminine : string <<get>> <<set>>
    + SingularNominativeMasculine : string <<get>> <<set>>
    + SingularNominativeNeuter : string <<get>> <<set>>
    + SingularGenitiveOther : string <<get>> <<set>>
    + PluralNominative : string <<get>> <<set>>
    + PluralGenitive : string <<get>> <<set>>
    + Adjective(Base:string, SingularNominativeFeminine:string, SingularGenitiveFeminine:string, SingularNominativeMasculine:string, SingularNominativeNeuter:string, SingularGenitiveOther:string, PluralNominative:string, PluralGenitive:string)
    + {static} ToAdjective(values:object[]) : Adjective
    + SingNomFem(Title:int) : string
    + SingNomMasc(Title:int) : string
    + SingNomNeuter(Title:int) : string
    + SingGenFem(Title:int) : string
    + SingGenOther(Title:int) : string
    + PluralNom(Title:int) : string
    + PluralGen(Title:int) : string
}
DbClass <|-- Adjective
class Hazard {
    + id : int <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Complexity : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + MechDescription : string <<get>> <<set>>
    + Level : int <<get>> <<set>>
    + Stealth : string <<get>> <<set>>
    + Hazard()
    + Hazard(id:int, name:string, complexity:string, description:string, mechDescription:string, level:int, stealth:string)
    + {static} ToHazard(values:object[]) : Hazard
    + <<override>> ToString() : string
    + ToTextFileString() : string
}
DbClass <|-- Hazard
enum Gender {
    None,
    Masculine,
    Feminine,
    Neuter,
}
abstract class DbClass {
}
class Noun {
    + Base : string <<get>> <<set>>
    + SingularNominative : string <<get>> <<set>>
    + SingularGenitive : string <<get>> <<set>>
    + PluralNominative : string <<get>> <<set>>
    + PluralGenitive : string <<get>> <<set>>
    + Title : int <<get>> <<set>>
    + Noun(Base:string, SingularNominative:string, SingularGenitive:string, PluralNominative:string, PluralGenitive:string, gender:Gender, title:int)
    + {static} ToNoun(values:object[]) : Noun
    + SingNom() : string
    + SingGen() : string
    + PluralNom() : string
    + PluralGen() : string
}
DbClass <|-- Noun
Noun --> "Gender" Gender
class EventBus <<static>> {
}
class InputFieldsVerificator {
    + ValidateLevelOfHeros(level:string, param:int) : bool
    + ValidateCountOfHeros(count:string, param:int) : bool
    + ValidateMaxSizeOfRooms(size:string, param:int) : bool
    + ValidateMinSizeOfRooms(size:string, param:int) : bool
    + ValidateCountOfRooms(count:string, param:int) : bool
}
MonoBehaviour <|-- InputFieldsVerificator
class SimpleSizesVerificator <<static>> {
    + {static} GetIntFromStringSizeOfRoom(s:string) : int
    + {static} GetIntFromStringCountOfRoom(s:string) : int
}
interface "ILink`1"<T> {
    + Link(element:T) : void
}
interface IButton {
    + {abstract} OnClick() : void
}
class "ILink`1"<T> {
}
"ILink`1" "<Button>" <|-- IButton
class UIInjector {
    + <<override>> InstallBindings() : void
}
MonoInstaller <|-- UIInjector
class GameObjectInjector {
    + <<override>> InstallBindings() : void
    + GetDungeonGenerator() : DungeonGenerator
    + GetDBManager() : DBManager
}
class "Func`1"<T> {
}
MonoInstaller <|-- GameObjectInjector
GameObjectInjector --> "OnGetDungeonGenerator<DungeonGenerator>" "Func`1"
GameObjectInjector --> "OnGetDBManager<DBManager>" "Func`1"
class CustomInputField {
    + CustomInputField()
    + SetBorderSettings(width:float, radious:float) : void
    + SetMarginSettings(margin:float) : void
    + SetPaddingSettings(padding:float) : void
    + OnInjectValidator(validator:DelegateValidator) : void
    + Validate(flag:bool, newvalue:int) : void
    + Text : string <<get>> <<set>>
}
class UxmlFactory {
}
class UxmlTraits {
    + <<override>> Init(ve:VisualElement, bag:IUxmlAttributes, cc:CreationContext) : void
}
class "UxmlFactory`2"<T1,T2> {
}
VisualElement <|-- CustomInputField
CustomInputField --> "TextField" TextField
"UxmlFactory`2" "<CustomInputField,UxmlTraits>" <|-- UxmlFactory
UxmlTraits o-> "_description" UxmlStringAttributeDescription
UxmlTraits o-> "_border" UxmlFloatAttributeDescription
UxmlTraits o-> "_radious" UxmlFloatAttributeDescription
UxmlTraits o-> "_margin" UxmlFloatAttributeDescription
UxmlTraits o-> "_padding" UxmlFloatAttributeDescription
UxmlTraits o-> "_colorBackground" UxmlColorAttributeDescription
UxmlTraits o-> "_colorBorder" UxmlColorAttributeDescription
UxmlTraits o-> "_fontSize" UxmlIntAttributeDescription
abstract class AbstractButton {
    + Link(element:Button) : void
    + Unlink(element:Button) : void
    + {abstract} OnClick() : void
}
IButton <|-- AbstractButton
class SubmitButton {
    + SubmitButton(countR:CustomInputField, maxR:CustomInputField, minR:CustomInputField, lvlH:CustomInputField, countH:CustomInputField, _trap:Toggle, _human:Toggle)
    + SubmitButton(size:DropdownField, count:DropdownField, lvl:CustomInputField, countH:CustomInputField, _trap:Toggle, _human:Toggle)
    + <<override>> OnClick() : void
}
enum SubmitButtonState {
    HARD,
    EASY,
}
AbstractButton <|-- SubmitButton
SubmitButton +-- SubmitButtonState
class TabController {
    + AddTab(element:Tab) : void
    + RemoveTab(element:Tab) : void
    + ActiveTab(element:Tab) : void
}
class Tab {
    + Tab(scrollView:ScrollView, button:Button)
    + InactiveScrollView() : void
    + ActiveScrollView() : void
}
Tab --> "Button" Button
class UIToolkitManager {
}
MonoBehaviour <|-- UIToolkitManager
UIToolkitManager --> "Submit" AbstractButton
@enduml
